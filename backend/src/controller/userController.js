import User from "../models/userModel.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

// ƒêƒÉng k√Ω user m·ªõi
// export const registerUser = async (req, res) => {
//     try {
//         const { username, email, password, phone, role } = req.body;

//         const existingUser = await User.findOne({ $or: [{ email }, { username }] });
//         if (existingUser) return res.status(400).json({ message: "Email ho·∫∑c username ƒë√£ t·ªìn t·∫°i!" });

//         const hashedPassword = await bcrypt.hash(password, 10);

//         const newUser = new User({
//             username,
//             email,
//             password: hashedPassword,
//             phone,
//             role: role === "admin" ? "admin" : "user",
//         });

//         await newUser.save();
//         res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user: newUser });
//     } catch (error) {
//         res.status(500).json({ message: "L·ªói server!", error });
//     }
// };

export const registerUser = async (req, res) => {
    try {
        const { username, email, password, phone, role } = req.body;

        console.log("üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);

        const existingUser = await User.findOne({ $or: [{ email }, { username }] });
        if (existingUser) return res.status(400).json({ message: "Email ho·∫∑c username ƒë√£ t·ªìn t·∫°i!" });

        const hashedPassword = await bcrypt.hash(password, 10);
        console.log("üîë M·∫≠t kh·∫©u ƒë√£ m√£ h√≥a:", hashedPassword);

        const newUser = new User({
            username,
            email,
            password: hashedPassword,
            phone,
            role: role === "admin" ? "admin" : "user",
        });

        await newUser.save();
        console.log("‚úÖ Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng:", newUser);

        res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user: newUser });

    } catch (error) {
        console.error("‚ùå L·ªói khi ƒëƒÉng k√Ω:", error); // In l·ªói ra log
        res.status(500).json({ message: "L·ªói server!", error: error.message }); // Tr·∫£ v·ªÅ l·ªói chi ti·∫øt
    }
};

// ƒêƒÉng nh·∫≠p user
export const loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });

        if (!user) return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });

        // So s√°nh m·∫≠t kh·∫©u
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });

        // T·∫°o token JWT c√≥ ch·ª©a role
        const token = jwt.sign(
            { id: user._id, role: user.role },
            process.env.JWT_SECRET,
            { expiresIn: "7d" }
        );

        res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", token, user });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!", error });
    }
};

// L·∫•y th√¥ng tin user theo ID
export const getUserById = async (req, res) => {
    try {
        const user = await User.findById(req.params.id).select("-password"); // ·∫®n password
        if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i!" });

        res.json(user);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!", error });
    }
};

// C·∫≠p nh·∫≠t th√¥ng tin user
export const updateUser = async (req, res) => {
    try {
        const { password, role, ...updateData } = req.body;

        // Ki·ªÉm tra token tr∆∞·ªõc khi cho ph√©p c·∫≠p nh·∫≠t
        if (!req.user) {
            return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!" });
        }

        // Kh√¥ng cho ph√©p c·∫≠p nh·∫≠t password tr·ª±c ti·∫øp
        if (password) {
            return res.status(400).json({ message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u t·∫°i ƒë√¢y!" });
        }

        // N·∫øu c·∫≠p nh·∫≠t role, ch·ªâ admin m·ªõi c√≥ quy·ªÅn
        if (role && req.user.role !== "admin") {
            return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi role!" });
        }

        const updatedUser = await User.findByIdAndUpdate(req.params.id, updateData, { new: true });

        if (!updatedUser) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i!" });

        res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", user: updatedUser });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!", error });
    }
};

// X√≥a user theo ID
export const deleteUser = async (req, res) => {
    try {
        const deletedUser = await User.findByIdAndDelete(req.params.id);
        if (!deletedUser) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i!" });

        res.json({ message: "X√≥a user th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!", error });
    }
};
